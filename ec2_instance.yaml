AWSTemplateFormatVersion: 2010-09-09
Description: This will launch a basic EC2 instance in the VPC of your choice. This enables CloudWatch Agent and SSM Agent
  to ensure logging on this machine is available, and SSM Session manager can be used as the bastion host to use this machine.
  If you are launching this in a private subnet and want to use Session manager, follow these instructions on setting up your
  VPC to support this first, https://aws.amazon.com/premiumsupport/knowledge-center/ec2-systems-manager-vpc-endpoints/

Parameters:
  InstanceName:
    Default: ping-test
    Description: The name of your EC2 instance
    Type: String

  SubnetId:
    Default: subnet-01ae72726cd3c26f2
    Description: The subnet in which to deploy this instance
    Type: AWS::EC2::Subnet::Id

  VpcId:
    Default: vpc-0e616bdfdf09478fc
    Description: The VPC ID to deploy this instance into
    Type: AWS::EC2::VPC::Id

  VpcCidrRange:
    Default: 10.12.0.0/16
    Description: The CIDR range of your VPC, used to allow ingress to your instance using SSM
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    Type: String

  CloudWatchConfig:
    Description: Name of parameter store which contains the json configuration of CWAgent.
    Type : String
    Default: AmazonCloudWatch-DefaultLinuxConfig

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    ConstraintDescription: must be a valid EC2 instance type.

  OrgTag:
    Type: String
    Default: IS
    Description: The organization tag to use for resources in this template
    AllowedValues:
      - IS
      - Engineering

  EnvironmentTag:
    Type: String
    Default: sbx
    Description: The environment name tag to use for resources in this template
    AllowedValues:
      - sbx
      - dev
      - test
      - prod

  WorkloadTag:
    Type: String
    Default: ping-bastion
    Description: The workload name tag to use for resources in this template

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:

  StandardEc2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of a dummy file, that change the contents of the dummy file can trigger the agent to reload the configuration from SSM parameter store.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/dummy.version':
              content: !Sub |
                "You can change the VERSION below to to simulate the update of metadata"
                "VERSION=1.0"
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command:
                Fn::Sub:
                  - |
                    /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${ssmkey} -s
                  - { ssmkey: !Ref CloudWatchConfig }
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
             '/etc/cfn/cfn-hup.conf':
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
             '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.StandardEc2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource StandardEc2Instance --region ${AWS::Region} --configsets UpdateEnvironment
                 runas=root
               mode: '000400'
               owner: root
               group: root
             "/lib/systemd/system/cfn-hup.service":
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service
    Properties: 
      EbsOptimized: False
      IamInstanceProfile: !Ref StandardEc2InstanceProfile
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      Monitoring: True
      SecurityGroupIds: 
        - !Ref StandardEc2SecurityGroup
      SubnetId: !Ref SubnetId
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
               #!/bin/bash
               rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
               /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${ssmkey} -s
               /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource StandardEc2Instance --region ${AWS::Region} --configsets default
               /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource StandardEc2Instance --region ${AWS::Region}
            - { ssmkey: !Ref CloudWatchConfig }
      Tags: 
        - Key: Name
          Value: !Ref InstanceName
        - Key: !Sub ${OrgTag}-workload
          Value: !Ref WorkloadTag
        - Key: Environment
          Value: !Ref EnvironmentTag

  StanardEc2InstanceRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${InstanceName}-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Description: Permits use of SSM sessions manager and cloudwatch by an ec2 instance.
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: AllowGetObject
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                -
                  Effect: Allow
                  Action: ssm:GetParameter
                  Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CloudWatchConfig}
      Tags:
        - Key: Name
          Value: !Sub ${InstanceName}-role
        - Key: !Sub ${OrgTag}-workload
          Value: !Ref WorkloadTag
        - Key: Environment
          Value: !Ref EnvironmentTag


  StandardEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub ${InstanceName}-Instance-Profile
      Roles: 
        - !Ref StanardEc2InstanceRole

  StandardEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${InstanceName}-SG
      VpcId: !Ref VpcId
      GroupDescription: !Sub Security group for ec2 instance ${InstanceName}
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          Description: String
          IpProtocol: "-1"
      SecurityGroupIngress: 
        - CidrIp: !Ref VpcCidrRange
          Description: SSM HTTPS traffic
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: !Ref VpcCidrRange
          Description: VPC All traffic
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub ${InstanceName}-sg
        - Key: !Sub ${OrgTag}-workload
          Value: !Ref WorkloadTag
        - Key: Environment
          Value: !Ref EnvironmentTag


  SsmParamCWConfig:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: !Ref CloudWatchConfig
      Description: Agent Configuration for standard ec2 instances
      Type: String
      Value: >
        {
            "agent": {
              "metrics_collection_interval": 10,
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            },
            "metrics": {
              "metrics_collected": {
                "cpu": {
                  "resources": [
                    "*"
                  ],
                  "measurement": [
                    {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"},
                    {"name": "cpu_usage_nice", "unit": "Percent"},
                    "cpu_usage_guest"
                  ],
                  "totalcpu": false,
                  "metrics_collection_interval": 10,
                  "append_dimensions": {
                    "customized_dimension_key_1": "customized_dimension_value_1",
                    "customized_dimension_key_2": "customized_dimension_value_2"
                  }
                },
                "disk": {
                  "resources": [
                    "/",
                    "/tmp"
                  ],
                  "measurement": [
                    {"name": "free", "rename": "DISK_FREE", "unit": "Gigabytes"},
                    "total",
                    "used"
                  ],
                  "ignore_file_system_types": [
                    "sysfs", "devtmpfs"
                  ],
                  "metrics_collection_interval": 60,
                  "append_dimensions": {
                    "customized_dimension_key_3": "customized_dimension_value_3",
                    "customized_dimension_key_4": "customized_dimension_value_4"
                  }
                },
                "diskio": {
                  "resources": [
                    "*"
                  ],
                  "measurement": [
                    "reads",
                    "writes",
                    "read_time",
                    "write_time",
                    "io_time"
                  ],
                  "metrics_collection_interval": 60
                },
                "swap": {
                  "measurement": [
                    "swap_used",
                    "swap_free",
                    "swap_used_percent"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used",
                    "mem_cached",
                    "mem_total"
                  ],
                  "metrics_collection_interval": 1
                },
                "net": {
                  "resources": [
                    "eth0"
                  ],
                  "measurement": [
                    "bytes_sent",
                    "bytes_recv",
                    "drop_in",
                    "drop_out"
                  ]
                },
                "netstat": {
                  "measurement": [
                    "tcp_established",
                    "tcp_syn_sent",
                    "tcp_close"
                  ],
                  "metrics_collection_interval": 60
                },
                "processes": {
                  "measurement": [
                    "running",
                    "sleeping",
                    "dead"
                  ]
                }
              },
              "append_dimensions": {
                "ImageId": "${aws:ImageId}",
                "InstanceId": "${aws:InstanceId}",
                "InstanceType": "${aws:InstanceType}",
                "AutoScalingGroupName": "${aws:AutoScalingGroupName}"
              },
              "aggregation_dimensions" : [["ImageId"], ["InstanceId", "InstanceType"], ["d1"],[]],
              "force_flush_interval" : 30
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                      "log_group_name": "standard_ec2",
                      "log_stream_name": "{instance_id}-{hostname}",
                      "timezone": "UTC"
                    }
                  ]
                }
              },
              "log_stream_name": "standard_log_stream",
              "force_flush_interval" : 15
            }
          }
      Tags:
        Name: !Ref CloudWatchConfig
        Workload: !Ref WorkloadTag
        Environment: !Ref EnvironmentTag
